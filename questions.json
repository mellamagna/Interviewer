[
	{
		"id": 1,
		"question": "What is Object Oriented Programming?",
		"checks": ["programming", "paradigm", "pattern", "object"],
		"answer": "OOP is a programming paradigm centered around the idea of 'objects' containing both data and code that interact with one another."
	},
	{
		"id": 2,
		"question": "What is a class and what is an object?",
		"checks": ["blueprint", "instance", "outline", "class", "object"],
		"answer": "A class is the 'blueprint' of an object and outlines its structure. An object is an instance of said class."
	},
	{
		"id": 3,
		"question": "What is inheritance?",
		"checks": ["inheritance","child","parent"],
		"answer": "Inheritance is the idea of a child class being based upon (or inheriting properties of) its parent object. Features common to all child classes are within the parent class."
	},
	{
		"id": 4,
		"question": "What is abstraction?",
		"checks": ["abstraction","data","hiding"],
		"answer": "Abstraction is a concept that involves 'data hiding' where only relevant code is displayed and is layered so that it is protected."
	},
	{
		"id": 5,
		"question": "What is polymorphism?",
		"checks": ["polymorphism","many","forms","types"],
		"answer": "Polymorphism is the idea that one object can take many forms, or that an interface can be provided to entities of many different types."
	},
	{
		"id": 6,
		"question": "What is encapsulation?",
		"checks": ["encapsulation","data","group","surround"],
		"answer": "Encapsulation is a principle of OOP that involves 'data grouping', limiting the scope of functions and surrounding them within blocks of code."
	},
	{
		"id": 7,
		"question": "What are methods?",
		"checks": ["method","collection","group","task","call"],
		"answer": "A method is a collection of statements that perform a specific task and return a value to the caller. There are class methods and instance methods."
	},
	{
		"id": 8,
		"question": "What is method overloading?",
		"checks": ["overload","same","name","different","parameter"],
		"answer": "Method overloading is when multiple methods are defined with the same name but different parameters (also known as compile-time or static polymorphism)."
	},
	{
		"id": 9,
		"question": "What is method overriding?",
		"checks": ["overrid","child","parent","defin"],
		"answer": "Method overriding is when a child class redefines a method defined within its parent class (also known as run-time or dynamic polymorphism)."
	},
	{
		"id": 10,
		"question": "How do you call an overridden method?",
		"checks": ["super"],
		"answer": "If one wishes to call a method from a parent class that has already been overridden by its child class it may be called from the child class using the `super` keyword."
	},
	{
		"id": 11,
		"question": "If a class extends another class what parameters in the parent class can be seen in the child?",
		"checks": ["public","protected"],
		"answer": "A class may see any of the data members defined in its parent class using the `public` and `protected` keywords."
	},
	{
		"id": 12,
		"question": "What keyword is used in Java to achieve inheritance?",
		"checks": ["extends","implements"],
		"answer": "`extends` for a class and `implements` for an interface (but inheritance may not be achieved if the desired parent class is final)."
	},
	{
		"id": 13,
		"question": "What is a constructor?",
		"checks": ["instance"],
		"answer": "A constructor is a method called to create an instance of an object. (It cannot be abstract, final, or static.)"
	},
	{
		"id": 14,
		"question": "What is the purpose of using the `this` keyword?",
		"checks": ["object","current","instance"],
		"answer": "The `this` keyword is used when one wishes to reference the current instance’s variables, methods, etc."
	},
	{
		"id": 15,
		"question": "What is the purpose of using the `super` keyword?",
		"checks": ["parent","super","class"],
		"answer": "The `super` keyword is used when one wishes to reference the current object’s parent class, whether to call on its constructor or access its data members."
	},
	{
		"id": 16,
		"question": "How would you keep a class from being inherited from?",
		"checks": ["final"],
		"answer": "A class may not be inherited from if the class is `final`."
	},
	{
		"id": 17,
		"question": "Have you heard of the keyword `static`?",
		"checks": ["instance"],
		"answer": "The `static` keyword is used when one wishes for a method or variable to belong to the class itself and not a particular instance of it."
	},
	{
		"id": 18,
		"question": "How do you use the keyword `static`?",
		"checks": ["define","declare","instance","static"],
		"answer": "The `static` keyword is used when a variable is declared or a method is defined. A `static` block of code may also be created to be executed when the class file is loaded."
	},
	{
		"id": 19,
		"question": "What is a static method in Java?",
		"checks": ["instance"],
		"answer": "A static method is associated with a class and not an instance of one, and may be called without creating an instance of said class."
	},
	{
		"id": 20,
		"question": "What is an instance variable?",
		"checks": ["instance","class","scope"],
		"answer": "An instance variable is a variable that is tied to an instance of a class, and only exists within the scope of that object."
	},
	{
		"id": 21,
		"question": "Can you override the main method in Java?",
		"checks": ["no","static"],
		"answer": "The main method is static and may not be overridden."
	},
	{
		"id": 22,
		"question": "What is the `final` keyword in Java?",
		"checks": ["immutable","change"],
		"answer": "The `final` keyword is used to declare methods, variables, or classes final (i.e., immutable)."
	},
	{
		"id": 23,
		"question": "How is an 'is-a' relationship achieved?",
		"checks": ["inherit"],
		"answer": "An 'is-a' relationship (inheritance) is attained when one class inherits from another."
	},
	{
		"id": 24,
		"question": "How is a 'has-a' relationship achieved?",
		"checks": ["composition","instance"],
		"answer": "A 'has-a' relationship (compsition) is attained when one class contains an instance of another."
	},
	{
		"id": 25,
		"question": "How do you create a subclass?",
		"checks": ["extends"],
		"answer": "A subclass is created when the `extends` keyword is used when the class is defined (e.g., class Child extends Parent)."
	},
	{
		"id": 26,
		"question": "What are primitive data types in Java?",
		"checks": ["primitive","raw","value","object"],
		"answer": "A primitive data type is a raw value that is not the instance of an object."
	},
	{
		"id": 27,
		"question": "What is a java bean?",
		"checks": ["bean","object","getter","setter"],
		"answer": "A java bean is a standard for creating an object, containing public getter and setter methods."
	},
	{
		"id": 28,
		"question": "What are wrapper classes in Java?",
		"checks": ["primitive"],
		"answer": "A wrapper class is an object used to contain a primitive value so that it may be treated as an object (for instance, in use with Collections)."
	},
	{
		"id": 29,
		"question": "What are the four access modifiers?",
		"checks": ["public", "protected", "default", "private"],
		"answer": "The four access modifiers are public, protected, default and private."
	},
	{
		"id": 30,
		"question": "What permissions does the `protected` modifier have?",
		"checks": ["class","subclass","package"],
		"answer": "`protected` allows access within the same class, any subclass, and anything within the same package."
	},
	{
		"id": 31,
		"question": "What permissions does the default modifier have?",
		"checks": ["class","package"],
		"answer": "The default modifier allows access within the same class and package only."
	},
	{
		"id": 32,
		"question": "What permissions does the `private` modifier have?",
		"checks": ["class"],
		"answer": "The `private` modifier only allows access within the same class."
	},
	{
		"id": 33,
		"question": "How does the `finally` keyword work?",
		"checks": ["try","catch"],
		"answer": "The finally keyword is used to create a block after a try-catch block, where the code within is executed after the block regardless of the outcome of the try-catch."
	},
	{
		"id": 34,
		"question": "Is there a scenario where the `finally` keyword isn’t executed?",
		"checks": ["exit"],
		"answer": "If the system forcefully exits or the block is exited before the finally block is reached, any code within the block is not executed."
	},
	{
		"id": 35,
		"question": "How does the `Object.finalize()` method work?",
		"checks": ["garbage"],
		"answer": "The `Object.finalize()` method is called when an object is being prepared for garbage collection. A subclass overrides the finalize method in order to dispose of system resources or perform other cleanup."
	},
	{
		"id": 36,
		"question": "What is an immutable class in Java, and how do you create one?",
		"checks": ["final"],
		"answer": "An immutable class is a class that may not be overridden, which is accomplished by declaring a class `final`."
	},
	{
		"id": 37,
		"question": "What is the most basic immutable object in Java?",
		"checks": ["string"],
		"answer": "The most basic immutable object is a string."
	},
	{
		"id": 38,
		"question": "What is the most basic immutable object in Java?",
		"checks": ["string"],
		"answer": "The most basic immutable object is a string (or a wrapper class)."
	},
	{
		"id": 39,
		"question": "Can constructors be private, and if so, why would you use one?",
		"checks": ["singleton"],
		"answer": "A constructor may be private and is used to create a singleton class (i.e., a class you only want one instance of)."
	},
	{
		"id": 40,
		"question": "What are some examples of loops in Java?",
		"checks": ["for","while","do","do-while"],
		"answer": "The three examples of loops in Java are the `for` loop (which iterates a specified number of times), the `while` loop (which executes as long as the provided condition is true), and the `do-while` loop (which behaves as a while loop but executes at least once)."
	},
	{
		"id": 41,
		"question": "How does an interface implement the concept of abstraction?",
		"checks": ["method"],
		"answer": "Abstraction involves “data hiding” where only relevant code is displayed, offering a layer of protection. An interface allows a user to use its methods without knowing specifically of their implementation."
	},
	{
		"id": 42,
		"question": "Explain the architecture of the JVM.",
		"checks": ["class","memory","execution"],
		"answer": "The JVM contains a class loader (which handles the loading of class files), the memory area (in which the methods, heap, JVM and native language stacks, and PC memory registers are all stored), and the execution engine which communicates with the native method interface to execute native code in the native method libraries."
	},
	{
		"id": 43,
		"question": "Explain how a string pool works.",
		"checks": ["new"],
		"answer": "If a String variable is assigned a value without using the `new` keyword, the string is placed in the “string pool”. Any subsequent string assigned that same value without using the `new` keyword is pointed to the location in memory where the string is stored. (Any string created using the `new` keyword will instead be created in the heap.)"
	},
	{
		"id": 44,
		"question": "How do you convert a string “2019-05-21” into a Date Type?",
		"checks": ["simpledateformat"],
		"answer": "A string is converted into a Date type by using the SimpleDateFormat object to parse the string into a Date object."
	},
	{
		"id": 45,
		"question": "What is exception handling and how do you implement it?",
		"checks": ["try","catch"],
		"answer": "Exception handling is the response to abnormal conditions requiring special processing in order to allow a program to continue to run. Exception handling is implemented by using try-catch blocks and correcting the unwanted behavior within the catch block."
	},
	{
		"id": 46,
		"question": "What are the different types of exceptions?",
		"checks": ["checked","unchecked"],
		"answer": "There are **checked** exceptions, which are checked before compiling and handled using try-catch blocks, and **unchecked** exceptions, which occur at runtime."
	},
	{
		"id": 47,
		"question": "What is serialization in Java?",
		"checks": ["byte","file"],
		"answer": "Serialization is a mechanism allowing objects to be represented by a sequence of bytes that may be read from and written to files."
	},
	{
		"id": 48,
		"question": "Name some Java 8 features.",
		"checks": ["functional","lambda","reference"],
		"answer": "Functional interfaces, lambda expressions, streams, and method references are all new features introduced to Java 8."
	},
	{
		"id": 49,
		"question": "List a few of the collections found in the Java Collections framework?",
		"checks": ["list","set","map","iterator","generic"],
		"answer": "Lists, Sets, Maps, (Iterators, and Generics) are a few collections found within the Java Collections framework."
	},
	{
		"id": 50,
		"question": "How do you implement a thread?",
		"checks": ["object","runnable","interface"],
		"answer": "A thread is implemented by either extending the Thread object or implementing the Runnable interface."
	}
]